#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
# NetData Configuration
[global]
  run as user = netdata
  web files owner = root
  web files group = netdata
  # Netdata is not designed to be exposed to potentially hostile
  # networks.See https://github.com/firehol/netdata/issues/164
  bind socket to IP = {{ openio_netdata_bind_address }}
  default port = {{ openio_netdata_bind_port }}
  update every = {{ openio_netdata_global_update_every }}

[backend]
  enabled = {{ openio_netdata_backend_enabled }}
  hostname = {{ openio_netdata_backend_hostname }}
  update every = {{ openio_netdata_backend_update_every | default(openio_netdata_global_update_every) }}
  timeout ms = {{ openio_netdata_backend_timeout_ms }}
  send charts matching = {{ openio_netdata_backend_charts | join(' ')}}
{% if openio_netdata_backend_destination %}
  destination = {{ openio_netdata_backend_destination }}
{% endif %}
  host tags = ansible_name="{{ inventory_hostname }}" namespace="{{ openio_netdata_namespace }}" rack="{{ _inventory.get('rack', '') }}"


[plugins]
{% for plugin, state in openio_netdata_active_plugins.items() | list %}
  {{ plugin }} = {{ 'yes' if state else 'no' }}
{% endfor %}
{% if inventory_hostname in openio_netdata_oio_hosts %}
  zookeeper = {{ 'yes' if inventory_hostname in openio_netdata_zookeeper_hosts else 'no' }}
  openio = {{ 'yes' if inventory_hostname in openio_netdata_oio_hosts else 'no' }}
  command = {{ 'yes' if inventory_hostname in openio_netdata_oio_hosts else 'no' }}
  container = {{ 'yes' if openio_netdata_redis_hosts and
                 (inventory_hostname == openio_netdata_redis_hosts | first) else 'no' }}
  fs = {{ 'yes' if inventory_hostname in openio_netdata_oiofs_hosts else 'no' }}
  s3roundtrip = {{ 'yes' if inventory_hostname in openio_netdata_s3rt_hosts else 'no' }}
  redis = {{ 'yes' if inventory.services.get('redis', []) else 'no' }}

[plugin:openio]
  update every = {{ openio_netdata_global_update_every }}
  command options = --ns {{ openio_netdata_namespace }}

{% set targets = _inventory.services.get('redis', []) | selectattr('role', 'match', openio_netdata_redis_account_group) | list %}
{% if targets %}
[plugin:container]
  update every = {{ openio_netdata_global_update_every }}
  command options = --ns {{ openio_netdata_namespace }} --fast --addr {{ targets[0].ip }}:{{ targets[0].port }}
{% endif %}

[plugin:redis]
  update every = {{ openio_netdata_global_update_every }}
  command options = --targets {{ inventory.services.get('redis', []) | redis_roles }}

[plugin:command]
  update every = {{ openio_netdata_global_update_every }}
  command options = --conf {{ openio_netdata_confdir }}/commands.yml

[plugin:zookeeper]
  update every = {{ openio_netdata_global_update_every }}
  command options = --ns {{ openio_netdata_namespace }}

[plugin:fs]
  update every = {{ openio_netdata_global_update_every }}
  command options = --conf {{ openio_netdata_confdir }}/oiofs.conf {% if openio_netdata_oiofs_debug %}--fast{% endif %}
{% endif %}

[plugin:s3roundtrip]
  update every = {{ openio_netdata_global_update_every }}
  command options = --conf {{ openio_netdata_confdir }}/s3-roundtrip.conf

[netdata.backend_metrics]
  enabled=no

[netdata.backend_bytes]
  enabled=no

[netdata.backend_ops]
  enabled=no

[netdata.backend_thread_cpu]
  enabled=no

[netdata.private_charts]
  enabled=no

{% for t in openio_netdata_ipv6_ignore %}
[ipv6.{{ t }}]
  enabled=no

{% endfor %}

{% for t in openio_netdata_users_groups_ignore %}
[groups.{{ t }}]
  enabled=no

[users.{{ t }}]
  enabled=no

{% endfor %}

[plugin:proc:diskspace]
  exclude space metrics on filesystems = tmpfs devtmpfs
